{
  "hash": "8f32b8302818b3a77cdd51dd01928d33",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Advanced Machine Learning with Python (Session 2 - Part 1)\nauthor: Fernando Cervantes (fernando.cervantes@jax.org)\nformat: \n  revealjs:\n    code-fold: false\n    progress: true\n    controls: true\n    output-file: \"Adv_ML_Python_presentation_2_1\"\n    fontsize: 20pt\n\nexecute:\n  error: true\n  echo: true\n  cache: true\n  freeze: true\n  keep-ipynb: true\n\njupyter: adv-ml\n---\n\n\n\n# Workshop outcomes\n\n* Understand the process of training ML models.\n*\tLoad pre-trained ML models and fine-tune them with new data.\n*\tEvaluate the performance of ML models.\n*\tAdapt ML models for different tasks from pre-trained models.\n\n# 0. Setup environment\n\n## Select runtime and connect\n\nOn the top right corner of the page, click the drop-down arrow to the right of the `Connect` button and select `Change runtime type`.\n\n![](../imgs/connect_runtime.png){width=50%}\n\n---\n\nMake sure `Python 3` runtime is selected. For this part of the workshop `CPU` acceleration is enough.\n\n![](../imgs/select_runtime.png){width=50%}\n\n---\n\nNow we can connect to the runtime by clicking `Connect`. This will create a **V**irtual **M**achine (**VM**) with compute resources we can use for a limited amount of time.\n\n![](../imgs/connect.png){height=25%}\n\n:::{.callout-caution}\nIn free Colab accounts these resources are not guaranteed and can be taken away without notice (preemptible machines).\n\nData stored in this runtime will be lost if not moved into other storage when the runtime is deleted.\n:::\n\n\n# Load pre-trained models\n\n---\n\n## Load pre-trained models\n\n* Lets use one from the PyTorch's `torchvision` module for computer vision\n\n* Try first with the InceptionV3 model. \n![InceptionV3](https://cloud.google.com/static/tpu/docs/images/inceptionv3onc--oview.png)\n\n---\n\n## Exercise: Use a pre-trained deep learning model to classify images {.scrollable}\n \n- [ ] Import the pre-trained weights of the Inception V3 model from models.inception_v3\n\n::: {#263963dd .cell execution_count=1}\n``` {.python .cell-code}\nimport torch\nfrom torchvision import models\n\ninception_weights = models.inception.Inception_V3_Weights.IMAGENET1K_V1\n\ninception_weights.meta\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n{'num_params': 27161264,\n 'min_size': (75, 75),\n 'categories': ['tench',\n  'goldfish',\n  'great white shark',\n  'tiger shark',\n  'hammerhead',\n  'electric ray',\n  'stingray',\n  'cock',\n  'hen',\n  'ostrich',\n  'brambling',\n  'goldfinch',\n  'house finch',\n  'junco',\n  'indigo bunting',\n  'robin',\n  'bulbul',\n  'jay',\n  'magpie',\n  'chickadee',\n  'water ouzel',\n  'kite',\n  'bald eagle',\n  'vulture',\n  'great grey owl',\n  'European fire salamander',\n  'common newt',\n  'eft',\n  'spotted salamander',\n  'axolotl',\n  'bullfrog',\n  'tree frog',\n  'tailed frog',\n  'loggerhead',\n  'leatherback turtle',\n  'mud turtle',\n  'terrapin',\n  'box turtle',\n  'banded gecko',\n  'common iguana',\n  'American chameleon',\n  'whiptail',\n  'agama',\n  'frilled lizard',\n  'alligator lizard',\n  'Gila monster',\n  'green lizard',\n  'African chameleon',\n  'Komodo dragon',\n  'African crocodile',\n  'American alligator',\n  'triceratops',\n  'thunder snake',\n  'ringneck snake',\n  'hognose snake',\n  'green snake',\n  'king snake',\n  'garter snake',\n  'water snake',\n  'vine snake',\n  'night snake',\n  'boa constrictor',\n  'rock python',\n  'Indian cobra',\n  'green mamba',\n  'sea snake',\n  'horned viper',\n  'diamondback',\n  'sidewinder',\n  'trilobite',\n  'harvestman',\n  'scorpion',\n  'black and gold garden spider',\n  'barn spider',\n  'garden spider',\n  'black widow',\n  'tarantula',\n  'wolf spider',\n  'tick',\n  'centipede',\n  'black grouse',\n  'ptarmigan',\n  'ruffed grouse',\n  'prairie chicken',\n  'peacock',\n  'quail',\n  'partridge',\n  'African grey',\n  'macaw',\n  'sulphur-crested cockatoo',\n  'lorikeet',\n  'coucal',\n  'bee eater',\n  'hornbill',\n  'hummingbird',\n  'jacamar',\n  'toucan',\n  'drake',\n  'red-breasted merganser',\n  'goose',\n  'black swan',\n  'tusker',\n  'echidna',\n  'platypus',\n  'wallaby',\n  'koala',\n  'wombat',\n  'jellyfish',\n  'sea anemone',\n  'brain coral',\n  'flatworm',\n  'nematode',\n  'conch',\n  'snail',\n  'slug',\n  'sea slug',\n  'chiton',\n  'chambered nautilus',\n  'Dungeness crab',\n  'rock crab',\n  'fiddler crab',\n  'king crab',\n  'American lobster',\n  'spiny lobster',\n  'crayfish',\n  'hermit crab',\n  'isopod',\n  'white stork',\n  'black stork',\n  'spoonbill',\n  'flamingo',\n  'little blue heron',\n  'American egret',\n  'bittern',\n  'crane bird',\n  'limpkin',\n  'European gallinule',\n  'American coot',\n  'bustard',\n  'ruddy turnstone',\n  'red-backed sandpiper',\n  'redshank',\n  'dowitcher',\n  'oystercatcher',\n  'pelican',\n  'king penguin',\n  'albatross',\n  'grey whale',\n  'killer whale',\n  'dugong',\n  'sea lion',\n  'Chihuahua',\n  'Japanese spaniel',\n  'Maltese dog',\n  'Pekinese',\n  'Shih-Tzu',\n  'Blenheim spaniel',\n  'papillon',\n  'toy terrier',\n  'Rhodesian ridgeback',\n  'Afghan hound',\n  'basset',\n  'beagle',\n  'bloodhound',\n  'bluetick',\n  'black-and-tan coonhound',\n  'Walker hound',\n  'English foxhound',\n  'redbone',\n  'borzoi',\n  'Irish wolfhound',\n  'Italian greyhound',\n  'whippet',\n  'Ibizan hound',\n  'Norwegian elkhound',\n  'otterhound',\n  'Saluki',\n  'Scottish deerhound',\n  'Weimaraner',\n  'Staffordshire bullterrier',\n  'American Staffordshire terrier',\n  'Bedlington terrier',\n  'Border terrier',\n  'Kerry blue terrier',\n  'Irish terrier',\n  'Norfolk terrier',\n  'Norwich terrier',\n  'Yorkshire terrier',\n  'wire-haired fox terrier',\n  'Lakeland terrier',\n  'Sealyham terrier',\n  'Airedale',\n  'cairn',\n  'Australian terrier',\n  'Dandie Dinmont',\n  'Boston bull',\n  'miniature schnauzer',\n  'giant schnauzer',\n  'standard schnauzer',\n  'Scotch terrier',\n  'Tibetan terrier',\n  'silky terrier',\n  'soft-coated wheaten terrier',\n  'West Highland white terrier',\n  'Lhasa',\n  'flat-coated retriever',\n  'curly-coated retriever',\n  'golden retriever',\n  'Labrador retriever',\n  'Chesapeake Bay retriever',\n  'German short-haired pointer',\n  'vizsla',\n  'English setter',\n  'Irish setter',\n  'Gordon setter',\n  'Brittany spaniel',\n  'clumber',\n  'English springer',\n  'Welsh springer spaniel',\n  'cocker spaniel',\n  'Sussex spaniel',\n  'Irish water spaniel',\n  'kuvasz',\n  'schipperke',\n  'groenendael',\n  'malinois',\n  'briard',\n  'kelpie',\n  'komondor',\n  'Old English sheepdog',\n  'Shetland sheepdog',\n  'collie',\n  'Border collie',\n  'Bouvier des Flandres',\n  'Rottweiler',\n  'German shepherd',\n  'Doberman',\n  'miniature pinscher',\n  'Greater Swiss Mountain dog',\n  'Bernese mountain dog',\n  'Appenzeller',\n  'EntleBucher',\n  'boxer',\n  'bull mastiff',\n  'Tibetan mastiff',\n  'French bulldog',\n  'Great Dane',\n  'Saint Bernard',\n  'Eskimo dog',\n  'malamute',\n  'Siberian husky',\n  'dalmatian',\n  'affenpinscher',\n  'basenji',\n  'pug',\n  'Leonberg',\n  'Newfoundland',\n  'Great Pyrenees',\n  'Samoyed',\n  'Pomeranian',\n  'chow',\n  'keeshond',\n  'Brabancon griffon',\n  'Pembroke',\n  'Cardigan',\n  'toy poodle',\n  'miniature poodle',\n  'standard poodle',\n  'Mexican hairless',\n  'timber wolf',\n  'white wolf',\n  'red wolf',\n  'coyote',\n  'dingo',\n  'dhole',\n  'African hunting dog',\n  'hyena',\n  'red fox',\n  'kit fox',\n  'Arctic fox',\n  'grey fox',\n  'tabby',\n  'tiger cat',\n  'Persian cat',\n  'Siamese cat',\n  'Egyptian cat',\n  'cougar',\n  'lynx',\n  'leopard',\n  'snow leopard',\n  'jaguar',\n  'lion',\n  'tiger',\n  'cheetah',\n  'brown bear',\n  'American black bear',\n  'ice bear',\n  'sloth bear',\n  'mongoose',\n  'meerkat',\n  'tiger beetle',\n  'ladybug',\n  'ground beetle',\n  'long-horned beetle',\n  'leaf beetle',\n  'dung beetle',\n  'rhinoceros beetle',\n  'weevil',\n  'fly',\n  'bee',\n  'ant',\n  'grasshopper',\n  'cricket',\n  'walking stick',\n  'cockroach',\n  'mantis',\n  'cicada',\n  'leafhopper',\n  'lacewing',\n  'dragonfly',\n  'damselfly',\n  'admiral',\n  'ringlet',\n  'monarch',\n  'cabbage butterfly',\n  'sulphur butterfly',\n  'lycaenid',\n  'starfish',\n  'sea urchin',\n  'sea cucumber',\n  'wood rabbit',\n  'hare',\n  'Angora',\n  'hamster',\n  'porcupine',\n  'fox squirrel',\n  'marmot',\n  'beaver',\n  'guinea pig',\n  'sorrel',\n  'zebra',\n  'hog',\n  'wild boar',\n  'warthog',\n  'hippopotamus',\n  'ox',\n  'water buffalo',\n  'bison',\n  'ram',\n  'bighorn',\n  'ibex',\n  'hartebeest',\n  'impala',\n  'gazelle',\n  'Arabian camel',\n  'llama',\n  'weasel',\n  'mink',\n  'polecat',\n  'black-footed ferret',\n  'otter',\n  'skunk',\n  'badger',\n  'armadillo',\n  'three-toed sloth',\n  'orangutan',\n  'gorilla',\n  'chimpanzee',\n  'gibbon',\n  'siamang',\n  'guenon',\n  'patas',\n  'baboon',\n  'macaque',\n  'langur',\n  'colobus',\n  'proboscis monkey',\n  'marmoset',\n  'capuchin',\n  'howler monkey',\n  'titi',\n  'spider monkey',\n  'squirrel monkey',\n  'Madagascar cat',\n  'indri',\n  'Indian elephant',\n  'African elephant',\n  'lesser panda',\n  'giant panda',\n  'barracouta',\n  'eel',\n  'coho',\n  'rock beauty',\n  'anemone fish',\n  'sturgeon',\n  'gar',\n  'lionfish',\n  'puffer',\n  'abacus',\n  'abaya',\n  'academic gown',\n  'accordion',\n  'acoustic guitar',\n  'aircraft carrier',\n  'airliner',\n  'airship',\n  'altar',\n  'ambulance',\n  'amphibian',\n  'analog clock',\n  'apiary',\n  'apron',\n  'ashcan',\n  'assault rifle',\n  'backpack',\n  'bakery',\n  'balance beam',\n  'balloon',\n  'ballpoint',\n  'Band Aid',\n  'banjo',\n  'bannister',\n  'barbell',\n  'barber chair',\n  'barbershop',\n  'barn',\n  'barometer',\n  'barrel',\n  'barrow',\n  'baseball',\n  'basketball',\n  'bassinet',\n  'bassoon',\n  'bathing cap',\n  'bath towel',\n  'bathtub',\n  'beach wagon',\n  'beacon',\n  'beaker',\n  'bearskin',\n  'beer bottle',\n  'beer glass',\n  'bell cote',\n  'bib',\n  'bicycle-built-for-two',\n  'bikini',\n  'binder',\n  'binoculars',\n  'birdhouse',\n  'boathouse',\n  'bobsled',\n  'bolo tie',\n  'bonnet',\n  'bookcase',\n  'bookshop',\n  'bottlecap',\n  'bow',\n  'bow tie',\n  'brass',\n  'brassiere',\n  'breakwater',\n  'breastplate',\n  'broom',\n  'bucket',\n  'buckle',\n  'bulletproof vest',\n  'bullet train',\n  'butcher shop',\n  'cab',\n  'caldron',\n  'candle',\n  'cannon',\n  'canoe',\n  'can opener',\n  'cardigan',\n  'car mirror',\n  'carousel',\n  \"carpenter's kit\",\n  'carton',\n  'car wheel',\n  'cash machine',\n  'cassette',\n  'cassette player',\n  'castle',\n  'catamaran',\n  'CD player',\n  'cello',\n  'cellular telephone',\n  'chain',\n  'chainlink fence',\n  'chain mail',\n  'chain saw',\n  'chest',\n  'chiffonier',\n  'chime',\n  'china cabinet',\n  'Christmas stocking',\n  'church',\n  'cinema',\n  'cleaver',\n  'cliff dwelling',\n  'cloak',\n  'clog',\n  'cocktail shaker',\n  'coffee mug',\n  'coffeepot',\n  'coil',\n  'combination lock',\n  'computer keyboard',\n  'confectionery',\n  'container ship',\n  'convertible',\n  'corkscrew',\n  'cornet',\n  'cowboy boot',\n  'cowboy hat',\n  'cradle',\n  'crane',\n  'crash helmet',\n  'crate',\n  'crib',\n  'Crock Pot',\n  'croquet ball',\n  'crutch',\n  'cuirass',\n  'dam',\n  'desk',\n  'desktop computer',\n  'dial telephone',\n  'diaper',\n  'digital clock',\n  'digital watch',\n  'dining table',\n  'dishrag',\n  'dishwasher',\n  'disk brake',\n  'dock',\n  'dogsled',\n  'dome',\n  'doormat',\n  'drilling platform',\n  'drum',\n  'drumstick',\n  'dumbbell',\n  'Dutch oven',\n  'electric fan',\n  'electric guitar',\n  'electric locomotive',\n  'entertainment center',\n  'envelope',\n  'espresso maker',\n  'face powder',\n  'feather boa',\n  'file',\n  'fireboat',\n  'fire engine',\n  'fire screen',\n  'flagpole',\n  'flute',\n  'folding chair',\n  'football helmet',\n  'forklift',\n  'fountain',\n  'fountain pen',\n  'four-poster',\n  'freight car',\n  'French horn',\n  'frying pan',\n  'fur coat',\n  'garbage truck',\n  'gasmask',\n  'gas pump',\n  'goblet',\n  'go-kart',\n  'golf ball',\n  'golfcart',\n  'gondola',\n  'gong',\n  'gown',\n  'grand piano',\n  'greenhouse',\n  'grille',\n  'grocery store',\n  'guillotine',\n  'hair slide',\n  'hair spray',\n  'half track',\n  'hammer',\n  'hamper',\n  'hand blower',\n  'hand-held computer',\n  'handkerchief',\n  'hard disc',\n  'harmonica',\n  'harp',\n  'harvester',\n  'hatchet',\n  'holster',\n  'home theater',\n  'honeycomb',\n  'hook',\n  'hoopskirt',\n  'horizontal bar',\n  'horse cart',\n  'hourglass',\n  'iPod',\n  'iron',\n  \"jack-o'-lantern\",\n  'jean',\n  'jeep',\n  'jersey',\n  'jigsaw puzzle',\n  'jinrikisha',\n  'joystick',\n  'kimono',\n  'knee pad',\n  'knot',\n  'lab coat',\n  'ladle',\n  'lampshade',\n  'laptop',\n  'lawn mower',\n  'lens cap',\n  'letter opener',\n  'library',\n  'lifeboat',\n  'lighter',\n  'limousine',\n  'liner',\n  'lipstick',\n  'Loafer',\n  'lotion',\n  'loudspeaker',\n  'loupe',\n  'lumbermill',\n  'magnetic compass',\n  'mailbag',\n  'mailbox',\n  'maillot',\n  'maillot tank suit',\n  'manhole cover',\n  'maraca',\n  'marimba',\n  'mask',\n  'matchstick',\n  'maypole',\n  'maze',\n  'measuring cup',\n  'medicine chest',\n  'megalith',\n  'microphone',\n  'microwave',\n  'military uniform',\n  'milk can',\n  'minibus',\n  'miniskirt',\n  'minivan',\n  'missile',\n  'mitten',\n  'mixing bowl',\n  'mobile home',\n  'Model T',\n  'modem',\n  'monastery',\n  'monitor',\n  'moped',\n  'mortar',\n  'mortarboard',\n  'mosque',\n  'mosquito net',\n  'motor scooter',\n  'mountain bike',\n  'mountain tent',\n  'mouse',\n  'mousetrap',\n  'moving van',\n  'muzzle',\n  'nail',\n  'neck brace',\n  'necklace',\n  'nipple',\n  'notebook',\n  'obelisk',\n  'oboe',\n  'ocarina',\n  'odometer',\n  'oil filter',\n  'organ',\n  'oscilloscope',\n  'overskirt',\n  'oxcart',\n  'oxygen mask',\n  'packet',\n  'paddle',\n  'paddlewheel',\n  'padlock',\n  'paintbrush',\n  'pajama',\n  'palace',\n  'panpipe',\n  'paper towel',\n  'parachute',\n  'parallel bars',\n  'park bench',\n  'parking meter',\n  'passenger car',\n  'patio',\n  'pay-phone',\n  'pedestal',\n  'pencil box',\n  'pencil sharpener',\n  'perfume',\n  'Petri dish',\n  'photocopier',\n  'pick',\n  'pickelhaube',\n  'picket fence',\n  'pickup',\n  'pier',\n  'piggy bank',\n  'pill bottle',\n  'pillow',\n  'ping-pong ball',\n  'pinwheel',\n  'pirate',\n  'pitcher',\n  'plane',\n  'planetarium',\n  'plastic bag',\n  'plate rack',\n  'plow',\n  'plunger',\n  'Polaroid camera',\n  'pole',\n  'police van',\n  'poncho',\n  'pool table',\n  'pop bottle',\n  'pot',\n  \"potter's wheel\",\n  'power drill',\n  'prayer rug',\n  'printer',\n  'prison',\n  'projectile',\n  'projector',\n  'puck',\n  'punching bag',\n  'purse',\n  'quill',\n  'quilt',\n  'racer',\n  'racket',\n  'radiator',\n  'radio',\n  'radio telescope',\n  'rain barrel',\n  'recreational vehicle',\n  'reel',\n  'reflex camera',\n  'refrigerator',\n  'remote control',\n  'restaurant',\n  'revolver',\n  'rifle',\n  'rocking chair',\n  'rotisserie',\n  'rubber eraser',\n  'rugby ball',\n  'rule',\n  'running shoe',\n  'safe',\n  'safety pin',\n  'saltshaker',\n  'sandal',\n  'sarong',\n  'sax',\n  'scabbard',\n  'scale',\n  'school bus',\n  'schooner',\n  'scoreboard',\n  'screen',\n  'screw',\n  'screwdriver',\n  'seat belt',\n  'sewing machine',\n  'shield',\n  'shoe shop',\n  'shoji',\n  'shopping basket',\n  'shopping cart',\n  'shovel',\n  'shower cap',\n  'shower curtain',\n  'ski',\n  'ski mask',\n  'sleeping bag',\n  'slide rule',\n  'sliding door',\n  'slot',\n  'snorkel',\n  'snowmobile',\n  'snowplow',\n  'soap dispenser',\n  'soccer ball',\n  'sock',\n  'solar dish',\n  'sombrero',\n  'soup bowl',\n  'space bar',\n  'space heater',\n  'space shuttle',\n  'spatula',\n  'speedboat',\n  'spider web',\n  'spindle',\n  'sports car',\n  'spotlight',\n  'stage',\n  'steam locomotive',\n  'steel arch bridge',\n  'steel drum',\n  'stethoscope',\n  'stole',\n  'stone wall',\n  'stopwatch',\n  'stove',\n  'strainer',\n  'streetcar',\n  'stretcher',\n  'studio couch',\n  'stupa',\n  'submarine',\n  'suit',\n  'sundial',\n  'sunglass',\n  'sunglasses',\n  'sunscreen',\n  'suspension bridge',\n  'swab',\n  'sweatshirt',\n  'swimming trunks',\n  'swing',\n  'switch',\n  'syringe',\n  'table lamp',\n  'tank',\n  'tape player',\n  'teapot',\n  'teddy',\n  'television',\n  'tennis ball',\n  'thatch',\n  'theater curtain',\n  'thimble',\n  'thresher',\n  'throne',\n  'tile roof',\n  'toaster',\n  'tobacco shop',\n  'toilet seat',\n  'torch',\n  'totem pole',\n  'tow truck',\n  'toyshop',\n  'tractor',\n  'trailer truck',\n  'tray',\n  'trench coat',\n  'tricycle',\n  'trimaran',\n  'tripod',\n  'triumphal arch',\n  'trolleybus',\n  'trombone',\n  'tub',\n  'turnstile',\n  'typewriter keyboard',\n  'umbrella',\n  'unicycle',\n  'upright',\n  'vacuum',\n  'vase',\n  'vault',\n  'velvet',\n  'vending machine',\n  'vestment',\n  'viaduct',\n  'violin',\n  'volleyball',\n  'waffle iron',\n  'wall clock',\n  'wallet',\n  'wardrobe',\n  'warplane',\n  'washbasin',\n  'washer',\n  'water bottle',\n  'water jug',\n  'water tower',\n  'whiskey jug',\n  'whistle',\n  'wig',\n  'window screen',\n  'window shade',\n  'Windsor tie',\n  'wine bottle',\n  'wing',\n  'wok',\n  'wooden spoon',\n  'wool',\n  'worm fence',\n  'wreck',\n  'yawl',\n  'yurt',\n  'web site',\n  'comic book',\n  'crossword puzzle',\n  'street sign',\n  'traffic light',\n  'book jacket',\n  'menu',\n  'plate',\n  'guacamole',\n  'consomme',\n  'hot pot',\n  'trifle',\n  'ice cream',\n  'ice lolly',\n  'French loaf',\n  'bagel',\n  'pretzel',\n  'cheeseburger',\n  'hotdog',\n  'mashed potato',\n  'head cabbage',\n  'broccoli',\n  'cauliflower',\n  'zucchini',\n  'spaghetti squash',\n  'acorn squash',\n  'butternut squash',\n  'cucumber',\n  'artichoke',\n  'bell pepper',\n  'cardoon',\n  'mushroom',\n  'Granny Smith',\n  'strawberry',\n  'orange',\n  'lemon',\n  'fig',\n  'pineapple',\n  'banana',\n  'jackfruit',\n  'custard apple',\n  'pomegranate',\n  'hay',\n  'carbonara',\n  'chocolate sauce',\n  'dough',\n  'meat loaf',\n  'pizza',\n  'potpie',\n  'burrito',\n  'red wine',\n  'espresso',\n  'cup',\n  'eggnog',\n  'alp',\n  'bubble',\n  'cliff',\n  'coral reef',\n  'geyser',\n  'lakeside',\n  'promontory',\n  'sandbar',\n  'seashore',\n  'valley',\n  'volcano',\n  'ballplayer',\n  'groom',\n  'scuba diver',\n  'rapeseed',\n  'daisy',\n  \"yellow lady's slipper\",\n  'corn',\n  'acorn',\n  'hip',\n  'buckeye',\n  'coral fungus',\n  'agaric',\n  'gyromitra',\n  'stinkhorn',\n  'earthstar',\n  'hen-of-the-woods',\n  'bolete',\n  'ear',\n  'toilet tissue'],\n 'recipe': 'https://github.com/pytorch/vision/tree/main/references/classification#inception-v3',\n '_metrics': {'ImageNet-1K': {'acc@1': 77.294, 'acc@5': 93.45}},\n '_ops': 5.713,\n '_file_size': 103.903,\n '_docs': 'These weights are ported from the original paper.'}\n```\n:::\n:::\n\n\n- [ ] Store the categories in a variable to use them later\n\n::: {#051c91e8 .cell execution_count=2}\n``` {.python .cell-code}\ncategories = inception_weights.meta[\"categories\"]\n```\n:::\n\n\n::: {.callout-tip}\nMore info about Inception V3 implementation in `torchvision` [here](https://pytorch.org/vision/main/models/generated/models.inception_v3.html)\n:::\n\n---\n\n## Exercise: Use a pre-trained deep learning model to classify images {.scrollable}\n\n- [ ] Load the Inception V3 model using the pre-trained weights `inception_weights`\n\n::: {#93c15e54 .cell execution_count=3}\n``` {.python .cell-code}\ndl_model = models.inception_v3(inception_weights, progress=True)\n\ndl_model.eval()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nInception3(\n  (Conv2d_1a_3x3): BasicConv2d(\n    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)\n    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (Conv2d_2a_3x3): BasicConv2d(\n    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)\n    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (Conv2d_2b_3x3): BasicConv2d(\n    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (maxpool1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (Conv2d_3b_1x1): BasicConv2d(\n    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)\n    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (Conv2d_4a_3x3): BasicConv2d(\n    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)\n    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n  )\n  (maxpool2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (Mixed_5b): InceptionA(\n    (branch1x1): BasicConv2d(\n      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch5x5_1): BasicConv2d(\n      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch5x5_2): BasicConv2d(\n      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)\n      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_1): BasicConv2d(\n      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_2): BasicConv2d(\n      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_3): BasicConv2d(\n      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch_pool): BasicConv2d(\n      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (Mixed_5c): InceptionA(\n    (branch1x1): BasicConv2d(\n      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch5x5_1): BasicConv2d(\n      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch5x5_2): BasicConv2d(\n      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)\n      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_1): BasicConv2d(\n      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_2): BasicConv2d(\n      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_3): BasicConv2d(\n      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch_pool): BasicConv2d(\n      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (Mixed_5d): InceptionA(\n    (branch1x1): BasicConv2d(\n      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch5x5_1): BasicConv2d(\n      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch5x5_2): BasicConv2d(\n      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)\n      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_1): BasicConv2d(\n      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_2): BasicConv2d(\n      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_3): BasicConv2d(\n      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch_pool): BasicConv2d(\n      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (Mixed_6a): InceptionB(\n    (branch3x3): BasicConv2d(\n      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_1): BasicConv2d(\n      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_2): BasicConv2d(\n      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_3): BasicConv2d(\n      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)\n      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (Mixed_6b): InceptionC(\n    (branch1x1): BasicConv2d(\n      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7_1): BasicConv2d(\n      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7_2): BasicConv2d(\n      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7_3): BasicConv2d(\n      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_1): BasicConv2d(\n      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_2): BasicConv2d(\n      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_3): BasicConv2d(\n      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_4): BasicConv2d(\n      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_5): BasicConv2d(\n      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch_pool): BasicConv2d(\n      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (Mixed_6c): InceptionC(\n    (branch1x1): BasicConv2d(\n      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7_1): BasicConv2d(\n      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7_2): BasicConv2d(\n      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7_3): BasicConv2d(\n      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_1): BasicConv2d(\n      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_2): BasicConv2d(\n      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_3): BasicConv2d(\n      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_4): BasicConv2d(\n      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_5): BasicConv2d(\n      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch_pool): BasicConv2d(\n      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (Mixed_6d): InceptionC(\n    (branch1x1): BasicConv2d(\n      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7_1): BasicConv2d(\n      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7_2): BasicConv2d(\n      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7_3): BasicConv2d(\n      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_1): BasicConv2d(\n      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_2): BasicConv2d(\n      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_3): BasicConv2d(\n      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_4): BasicConv2d(\n      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_5): BasicConv2d(\n      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch_pool): BasicConv2d(\n      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (Mixed_6e): InceptionC(\n    (branch1x1): BasicConv2d(\n      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7_1): BasicConv2d(\n      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7_2): BasicConv2d(\n      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7_3): BasicConv2d(\n      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_1): BasicConv2d(\n      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_2): BasicConv2d(\n      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_3): BasicConv2d(\n      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_4): BasicConv2d(\n      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7dbl_5): BasicConv2d(\n      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch_pool): BasicConv2d(\n      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (AuxLogits): InceptionAux(\n    (conv0): BasicConv2d(\n      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (conv1): BasicConv2d(\n      (conv): Conv2d(128, 768, kernel_size=(5, 5), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(768, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (fc): Linear(in_features=768, out_features=1000, bias=True)\n  )\n  (Mixed_7a): InceptionD(\n    (branch3x3_1): BasicConv2d(\n      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3_2): BasicConv2d(\n      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)\n      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7x3_1): BasicConv2d(\n      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7x3_2): BasicConv2d(\n      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7x3_3): BasicConv2d(\n      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch7x7x3_4): BasicConv2d(\n      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (Mixed_7b): InceptionE(\n    (branch1x1): BasicConv2d(\n      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3_1): BasicConv2d(\n      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3_2a): BasicConv2d(\n      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3_2b): BasicConv2d(\n      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_1): BasicConv2d(\n      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_2): BasicConv2d(\n      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_3a): BasicConv2d(\n      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_3b): BasicConv2d(\n      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch_pool): BasicConv2d(\n      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (Mixed_7c): InceptionE(\n    (branch1x1): BasicConv2d(\n      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3_1): BasicConv2d(\n      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3_2a): BasicConv2d(\n      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3_2b): BasicConv2d(\n      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_1): BasicConv2d(\n      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_2): BasicConv2d(\n      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_3a): BasicConv2d(\n      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch3x3dbl_3b): BasicConv2d(\n      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)\n      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n    (branch_pool): BasicConv2d(\n      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)\n    )\n  )\n  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))\n  (dropout): Dropout(p=0.5, inplace=False)\n  (fc): Linear(in_features=2048, out_features=1000, bias=True)\n)\n```\n:::\n:::\n\n\n---\n\n## Exercise: Use a pre-trained deep learning model to classify images {.scrollable}\n\n- [ ] Load a sample image to predict its category\n\n::: {#d683459e .cell execution_count=4}\n``` {.python .cell-code}\nimport skimage\nimport matplotlib.pyplot as plt\n\nsample_im = skimage.data.rocket()\nsample_im.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n(427, 640, 3)\n```\n:::\n:::\n\n\n---\n\n## Exercise: Use a pre-trained deep learning model to classify images {.scrollable}\n\n- [ ] Visualize the sample image\n\n::: {#08c24b6b .cell execution_count=5}\n``` {.python .cell-code}\nplt.imshow(sample_im)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](DL_image_analysis_2_1_files/figure-revealjs/cell-6-output-1.png){width=608 height=416}\n:::\n:::\n\n\n---\n\n## Exercise: Use a pre-trained deep learning model to classify images\n\n- [ ] Inspect what transforms are required by the pre-trained Inception model to work properly\n\n::: {#232e7d5a .cell execution_count=6}\n``` {.python .cell-code}\ninception_weights.transforms\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nfunctools.partial(<class 'torchvision.transforms._presets.ImageClassification'>, crop_size=299, resize_size=342)\n```\n:::\n:::\n\n\n::: {.callout-important}\n`functools.partial` is a function to define functions with static arguments. So 👆 returns a function when it is called!\n:::\n\n::: {.callout-note}\nThe transforms used by the Inception V3 are\n\n  1. resize the image to 342x342 pixels,\n\n  2. crop the center 299x299 pixels window, and\n\n  3. normalize the values of the RGB channels.\n:::\n\n---\n\n## Exercise: Use a pretrained deep learning model to classify images\n\n- [ ] Define a preprocessing pipeline using the inception_weights.transforms() method. Add also a transformation from `numpy` arrays into torch tensors.\n\n::: {#6d1734ac .cell execution_count=7}\n``` {.python .cell-code}\nfrom torchvision.transforms.v2 import Compose, ToTensor\n\npipeline = Compose([\n  ToTensor(),\n  inception_weights.transforms()\n])\n\npipeline\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nCompose(\n      ToTensor()\n      ImageClassification(\n      crop_size=[299]\n      resize_size=[342]\n      mean=[0.485, 0.456, 0.406]\n      std=[0.229, 0.224, 0.225]\n      interpolation=InterpolationMode.BILINEAR\n  )\n)\n```\n:::\n:::\n\n\n---\n\n## Exercise: Use a pretrained deep learning model to classify images\n\n- [ ] Pre-process the sample image using our pipeline\n\n::: {#af26284b .cell execution_count=8}\n``` {.python .cell-code}\nsample_x = pipeline(sample_im)\ntype(sample_x), sample_x.shape, sample_x.min(), sample_x.max()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n(torch.Tensor, torch.Size([3, 299, 299]), tensor(-1.8792), tensor(2.6400))\n```\n:::\n:::\n\n\n---\n\n## Exercise: Use a pretrained deep learning model to classify images\n\n- [ ] Use the pre-trained model to predict the class of our sample image\n\n::: {.callout-caution}\nApply the model on sample_x[None, ...], so it is treated as a one-sample batch\n:::\n\n::: {#20e9713b .cell execution_count=9}\n``` {.python .cell-code}\nsample_y = dl_model(sample_x[None, ...])\n\nsample_y.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\ntorch.Size([1, 1000])\n```\n:::\n:::\n\n\n---\n\n## Exercise: Use a pretrained deep learning model to classify images {.scrollable}\n\n::: {.callout-note}\nThe model's output are the log-probabilities of `sample_x` belonging to each of the 1000 classes.\n:::\n\n- [ ] Show the categories with the highest *log-*probabilities.\n\n::: {#25b97bc6 .cell execution_count=10}\n``` {.python .cell-code}\nsample_y.argsort(dim=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\ntensor([[578, 253, 339, 982, 301,  40, 584, 897, 382,  12, 170, 181,  25, 161,\n         255, 162, 159,  14, 500,  72,  44, 368, 714, 211, 201, 240,  90, 277,\n          99, 519,  46,  13, 790, 160, 883, 307,  31, 467, 271,  32, 452, 997,\n          92, 414, 286,  64, 241, 661, 360, 381, 473, 999, 316,  24, 184, 213,\n         804,  26, 889, 383, 689,  11, 231,  28, 207, 520, 134,  77,  37, 177,\n         513, 539, 191, 264, 306,  19, 103, 529, 823, 171, 838, 247, 174, 400,\n         228, 665, 669, 278,  16, 870, 354, 412, 272, 377, 175, 411, 551,  75,\n         265, 390, 601, 929,  27, 543, 434, 268,  94, 200,  33, 504, 760, 614,\n         387, 875, 167, 809, 588, 189,  30, 291, 703, 944, 323, 610, 631,  57,\n          41, 881, 349, 938, 493, 825, 732, 249, 593, 299, 516, 237, 246, 195,\n         137, 850, 756,  91, 695, 336, 799, 431, 766, 761, 310, 337, 894, 622,\n         305, 129, 351, 989, 581, 991, 612, 110, 672, 436, 239, 226,  93,  76,\n         785,  21, 260,  63, 294, 176, 960, 528, 606, 826, 168, 166,  87, 531,\n         355, 154,  15, 774, 717, 322,  18,   0, 193, 435, 152, 678, 722, 269,\n          86,  47, 292, 759, 248, 317, 105, 302, 621, 376,  60, 793, 295, 283,\n         692, 720, 495, 859, 284, 393, 267, 596, 537, 656, 235, 831, 707, 444,\n          85, 130, 232, 534, 560, 204, 188, 430, 379, 853,  43,  61, 261, 684,\n         932, 172, 746, 178, 986, 876, 615, 996, 770, 700, 298, 459, 384, 273,\n         328,  52, 605, 736, 968,  95, 410, 922, 296, 259, 347, 401, 518, 256,\n         912, 937, 319,  97, 155, 463, 636, 457,  53, 671, 119, 893, 300, 281,\n         921, 752, 394, 163, 244, 340, 697, 985, 763, 553, 243, 133, 568, 210,\n         454, 933, 597, 443,  20, 308, 451, 579, 549, 164, 716, 917,  59, 592,\n         136, 114, 185, 690, 472, 878, 642, 135, 771, 639, 276, 456, 485, 238,\n         943, 582, 486, 544, 979,  42, 868, 511, 321, 156,   9, 721, 365, 113,\n         263, 910,  88, 499, 670,  17, 635, 734, 266, 984, 386, 140, 280, 750,\n         407,  10, 654, 197, 478,  36,  62, 775, 638,  55, 275, 861, 230, 421,\n         603, 646, 447, 112, 233, 788, 222, 655, 492, 423, 896, 618, 675, 993,\n         794, 616, 215, 915, 196, 402, 229, 852, 364,  22, 139,  81, 685, 713,\n         309, 314, 153, 116, 547, 217, 643, 566, 719, 874,  98, 330, 587, 254,\n         458, 623, 886, 901, 842, 541, 930, 817, 507, 946, 362, 849,  73, 786,\n         939,  35, 157, 396, 250, 326, 725, 345, 617, 580, 988, 778, 552, 251,\n         187, 865,  71, 887, 242, 651, 448,  23, 559, 359, 202, 145, 180, 857,\n         691, 182, 475, 813, 743, 131, 843, 304, 318, 353, 422, 440,  89, 234,\n         704, 706,  68, 728, 150, 395, 108, 391, 512, 425, 468, 947, 143, 293,\n         350, 526, 257, 550, 957, 970, 955, 575,   5, 101, 123, 945, 633, 104,\n          80, 502, 729, 508,  49, 225, 258, 426, 637, 183, 995, 789, 344, 906,\n         948, 179, 950, 398, 397, 664, 532, 903, 198, 626, 194, 236, 667, 676,\n         757, 465, 324, 335, 218, 303, 699, 496, 934, 158,  38, 441, 433, 992,\n         375, 357, 810, 815, 693, 192, 585, 107, 586, 289, 331, 735, 772, 125,\n         515, 416, 392, 482, 869, 608, 681, 607, 882, 640, 380, 126, 854, 924,\n         768, 312, 589, 837, 141, 570, 315, 653, 102, 572, 479, 369, 956, 503,\n         115, 481,  74, 797, 122, 535, 327, 352,  45, 953, 802,  48, 389,  96,\n         270, 723, 224, 378, 795, 424, 450, 461, 796, 100,  39, 252, 800, 648,\n         679, 121, 787, 453, 925, 613, 846, 726, 702, 173,   8, 221, 287, 926,\n         169, 341, 325, 186, 128, 356, 709, 455, 645, 983,   6,  67, 449, 285,\n         972,  65, 765, 564, 282, 663, 677, 118, 806,  29, 576, 151, 388, 748,\n         782, 311, 358, 963, 329, 824, 333, 533, 203, 905, 673, 830, 951, 480,\n         419, 445, 829, 127, 904, 858,  69, 371, 313, 208, 753, 509, 521, 641,\n         219, 214, 209,  56, 928, 462, 138, 149, 776, 987, 523, 206, 916, 332,\n          51,   1, 320, 262, 798, 524, 805, 514, 627, 274, 705, 334, 420, 227,\n         773, 474, 205, 696, 899,  84, 212, 111,   7, 483, 801, 109, 990, 710,\n         866, 488,  78, 791, 602, 851, 747, 971,  70,  82, 439, 848, 367, 873,\n         591, 958, 505, 464, 342, 290, 674, 659, 898, 288, 803, 967, 594, 370,\n         730, 385, 567, 779, 223, 374, 429, 649, 741, 836, 711,  50, 952, 165,\n         598, 739, 546, 487, 686, 658, 749, 715, 501, 609, 890, 954, 432,  34,\n         769, 428, 647, 973, 962, 742, 981,   4, 619, 892,  58, 841, 964,  83,\n         142, 891, 361, 885, 909, 927, 124, 777, 363, 220, 373, 144, 406, 660,\n         731, 297, 783, 630, 245, 577, 106, 583, 965, 911, 427, 556, 834, 132,\n         762, 469, 569, 738, 199, 491, 446, 348,   3, 346, 147, 902, 808, 740,\n         936, 908, 819, 372, 827, 624, 975, 687, 548, 879, 611,  79, 574, 662,\n         476, 522, 864, 745, 969, 880, 998, 680, 343, 632, 884, 877, 497, 835,\n         477, 701, 811, 573, 818, 120, 949, 565, 190, 767, 914, 650, 418, 931,\n         216, 844, 872, 666, 415, 527, 117, 604, 148, 438, 923, 279, 599, 888,\n         698, 961, 855, 941, 338, 978, 466, 538, 688, 724, 839, 792, 542, 652,\n         525, 814, 918, 708, 366, 590, 860, 862, 600, 784, 942, 966, 976, 867,\n           2, 146, 489, 413, 712, 595, 644, 828, 994,  54, 399, 629, 780, 727,\n         822, 959, 764, 935, 832, 755, 751, 417, 977, 561, 558, 545, 625, 490,\n          66, 470, 980, 974, 816, 571, 863, 506, 737, 494, 555, 907, 409, 840,\n         460, 563, 471, 634, 620, 820, 484, 530, 913, 536, 403, 718, 856, 758,\n         845, 919, 821, 562, 871, 920, 404, 408, 683, 781, 940, 510, 847, 498,\n         628, 694, 895, 554, 405, 900, 442, 754, 833, 437, 807, 682, 668, 557,\n         812, 733, 517, 540, 744, 657]])\n```\n:::\n:::\n\n\n---\n\n## Exercise: Use a pretrained deep learning model to classify images {.scrollable}\n\n- [ ] Use the list of categories to translate the predicted class index into its category.\n\n::: {#ade56e7d .cell execution_count=11}\n``` {.python .cell-code}\nsorted_predicted_classes = sample_y.argsort(dim=1, descending=True)[0, :10]\nsorted_probs = torch.softmax(sample_y, dim=1)[0, sorted_predicted_classes]\n\nfor idx, prob in zip(sorted_predicted_classes, sorted_probs):\n    print(categories[idx], \"%3.2f %%\" % (prob * 100))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmissile 37.93 %\nprojectile 14.39 %\ndrilling platform 12.16 %\ncrane 5.72 %\npole 1.06 %\nspace shuttle 0.93 %\nflagpole 0.93 %\nmosque 0.51 %\nobelisk 0.46 %\nsolar dish 0.45 %\n```\n:::\n:::\n\n\n# Try with other sample images (only works with RGB!)\n\n---\n\n## Try with other sample images {.scrollable}\n\n::: {.callout-caution}\nOnly works with RGB images\n:::\n\n- [ ] Use the pretrained model to classify images from the internet (maybe pictures of [dogs](https://en.wikipedia.org/wiki/Dog)).\n\n::: {#498b8653 .cell execution_count=12}\n``` {.python .cell-code}\nsample_im = skimage.io.imread(\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c8/Black_Labrador_Retriever_-_Male_IMG_3323.jpg/1280px-Black_Labrador_Retriever_-_Male_IMG_3323.jpg\")\nsample_x = pipeline(sample_im)\nsample_y = dl_model(sample_x[None, ...])\n\nplt.imshow(sample_im)\nplt.title(categories[sample_y.argmax(dim=1)])\nplt.show()\n\nsorted_predicted_classes = sample_y.argsort(dim=1, descending=True)[0, :10]\nsorted_probs = torch.softmax(sample_y, dim=1)[0, sorted_predicted_classes]\n\nfor idx, prob in zip(sorted_predicted_classes, sorted_probs):\n    print(categories[idx], \"%3.2f %%\" % (prob * 100))\n```\n\n::: {.cell-output .cell-output-display}\n![](DL_image_analysis_2_1_files/figure-revealjs/cell-13-output-1.png){width=608 height=431}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nLabrador retriever 87.15 %\nGerman short-haired pointer 3.31 %\nflat-coated retriever 0.92 %\nGreat Dane 0.83 %\nblack-and-tan coonhound 0.52 %\ngiant schnauzer 0.34 %\ncurly-coated retriever 0.22 %\nStaffordshire bullterrier 0.19 %\nDoberman 0.14 %\nRottweiler 0.07 %\n```\n:::\n:::\n\n\n- [ ] Try with an image from a category that is not in the labels set of the model (like giraffes: [https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Giraffe_Mikumi_National_Park.jpg/800px-Giraffe_Mikumi_National_Park.jpg](https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Giraffe_Mikumi_National_Park.jpg/800px-Giraffe_Mikumi_National_Park.jpg))\n\n# Using Deep Learning models as feature extractors\n\n## Exercise: Modify the classifier layer `dl_model.fc` to return the features map from the input image instead of the category\n\n::: {.callout-tip}\nThe classifier layer is commonly implemented as a MultiLayer Perceptron (Fully connected) at the end of the models.\nThe specific name of that layer can vary between implementations.\n:::\n\n- [ ] Load the pre-trained Inception V3 model again to use it as feature extractor.\n\n::: {#5b57df1b .cell execution_count=13}\n``` {.python .cell-code}\ndl_extractor = models.inception_v3(inception_weights, progress=True)\ndl_extractor.eval()\n\ndl_extractor.fc\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nLinear(in_features=2048, out_features=1000, bias=True)\n```\n:::\n:::\n\n\n---\n\n## Exercise: Modify the classifier layer `dl_model.fc` to return the features map from the input image instead of the category\n\n- [ ] Replace the `.fc` layer with a `torch.nn.Identity` module.\n\n::: {#6c4f9814 .cell execution_count=14}\n``` {.python .cell-code}\ndl_extractor.fc = torch.nn.Identity()\n```\n:::\n\n\n- [ ] Use the model for feature extraction in the same way it is used for image classification.\n\n::: {#f5b18659 .cell execution_count=15}\n``` {.python .cell-code}\nsample_fx = dl_extractor(sample_x[None, ...])\n\nsample_fx.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\ntorch.Size([1, 2048])\n```\n:::\n:::\n\n\n",
    "supporting": [
      "DL_image_analysis_2_1_files"
    ],
    "filters": [],
    "includes": {}
  }
}